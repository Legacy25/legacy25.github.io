{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"padd",
				"padding-right"
			],
			[
				"ab",
				"about-section"
			],
			[
				"bol",
				"bolder"
			],
			[
				"mar",
				"margin"
			],
			[
				"pad",
				"padding"
			],
			[
				"ba",
				"background"
			],
			[
				"abou",
				"about-nav"
			],
			[
				"tex",
				"text-transform"
			],
			[
				"fon",
				"font-weight"
			],
			[
				"back",
				"background-size"
			],
			[
				"sa",
				"sans-serif"
			],
			[
				"paddin",
				"padding-top"
			],
			[
				"San",
				"sans-serif"
			],
			[
				"backg",
				"background-size"
			],
			[
				"bac",
				"background-position"
			],
			[
				"padding",
				"padding-bottom"
			],
			[
				"background-",
				"background-position"
			],
			[
				"a",
				"auto"
			],
			[
				"te",
				"text-indent"
			],
			[
				"f",
				"font-family"
			],
			[
				"ari",
				"arindamnandi"
			],
			[
				"sql",
				"sqlfiles"
			],
			[
				"n",
				"nfields"
			],
			[
				"si",
				"sizeof"
			],
			[
				"de",
				"delimoffind"
			],
			[
				"delim",
				"delimoffsets"
			],
			[
				"str",
				"strtok_empty"
			],
			[
				"tpch",
				"tpchdb"
			],
			[
				"tbl",
				"tblfiles"
			],
			[
				"r",
				"rows"
			],
			[
				"sq",
				"sqlite3"
			],
			[
				"times",
				"times_sqlite"
			],
			[
				"tim",
				"times_sqlite"
			],
			[
				"sub",
				"subproclist"
			],
			[
				"q",
				"query"
			],
			[
				"read",
				"readlinefromfile"
			],
			[
				"v",
				"void"
			],
			[
				"s",
				"sans-serif"
			],
			[
				"font",
				"font-weight"
			],
			[
				"ord",
				"orderdate"
			],
			[
				"or",
				"orderdate"
			],
			[
				"t",
				"totalprice"
			],
			[
				"nati",
				"nationkey"
			],
			[
				"nat",
				"nation"
			],
			[
				"cus",
				"customer"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "---\nlayout: post\ntitle: Google mock interview problem\ncomments: true\nshortinfo: Exploring better solutions to a brute force approach\ncategories: [Programming]\ntags: [Google, Mock Interview, Programming Exercise]\n---\n\nI had the chance to sit through a talk from a University at Buffalo alumnus working at Google. In addition to information about interviewing procedures at Google, we were given an example of the kind of problem we could be asked to solve in an interview. You only get forty-five minutes, and you have to code it up in proper syntax modulo imports and minor errors in a language like Java, Python or C++.\n\nI found the problem pretty interesting. Coming up with a brute force solution proved to be quite trivial and could be coded up in about thirty minutes. In this post though, I want to explore better solutions.\n\n### The problem\n\nImagine you have a file with a list of imaginary movie titles like this -\n\n```\nto sir with love\nlove story\nlove in the time of war\nwar never changes\nstory that ends with a twist\nchanges that come\nhave a heart\nheart break\n```\n\nAll words are lower-cased to avoid trivial toUpper and toLower conversion inconveniences. The objective is to find the length of the longest possible string you can get, by joining together movie titles in such a way that the next movie in the sequence begins with the same word as the word with which the previous ends.\n\nFor example, ```to sir with love``` and ```love story``` can combine to form ```to sir with love story```. Our objective is to find the longest possible chain and output its length. For this example, that would be 59 for the quite unintelligible string -\n\n```\nto sir with love in the time of war never changes that come\n```\n\n### Brute Force FTW\n\nIts pretty straightforward to come up with a brute force solution for this.\n\n1. Read in the list and objectify each title into a class called, lets say ```MovieTitle``` with attributes ```length```, ```firstWord``` and ```lastWord```. We then have a list of ```MovieTitle```.\n2. Build a data structure to map the first word of each movie to a list of titles that begin with that same word. In Java, a possible data-structure for this would be ```HashMap<String, ArrayList<MovieTitle>>```, in Python maybe a dictionary of words to lists of strings.\n3. Define a function that computes the longest possible chain for a particular title. We can use recursion to make our lives simpler.\n\nLet's call the recursive function ```longestPossibleChain```. How can we define such a function?\n\nBelow is one simple solution.\n\n``` java\nint longestPossibleChain(MovieTitle m) {\n	/* Minimum possible match length is the length of the title itself */\n	int len = m.getLength();	\n\n	/* Get a list of possible matches */\n	ArrayList<MovieTitle> possibleMatches = firstWordMap.get(m.getLastWord());\n					\n	/* Base case */\n	if(possibleMatches == null)\n		return len;\n\n	/* The common prefix, the last word of the first title and the first word of the second */\n	int common = m.getLastWord().length();\n\n	/* Get the longest chain for all titles that match */\n	int max = 0;\n	\n	for(MovieTitle mov : possibleMatches) {\n		int match = longestPossibleChain(mov) - common;\n		if(match > max)\n			max = match;\n	}\n	\n	return len + max;\n}	\n```\n\nThis does not take into account circular cases. It would be non-terminating if there were titles like ```love is war``` and ```war is love```, but since the expected behaviour is not defined for this case, we can ignore it for the moment.\n\n### Analyze that!\n\nLets say we have ```n``` movie titles. We will have to iterate over ```n``` movie titles, doing a complete breadth-first search on each of trees rooted at those elements, resulting in ```O(n*(n+E))``` complexity, where E is dependent on the possible chains.\n\nClearly this is not good. Let's see if we can do better.\n\n### Memoization\n\nThe first obvious thing to realize is that ```longestPossibleChain``` can be called several times on the same title, and recomputing it everytime is wasteful. We can cache the result for each ```MovieTitle``` in an attribute defined within the class itself. This is an optimization technique common in recursive programming called memoization. We require ```O(n)``` extra space, but running time is much faster, although asymptotically it doesn't make a difference.\n\n### Tree Traversal?",
			"file": "_posts/2015-10-01-google-mock-interview.md",
			"file_size": 4326,
			"file_write_time": 130882010065556324,
			"settings":
			{
				"buffer_size": 4325,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "",
			"file": "/home/arindam/test/ladan",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 199.0,
		"last_filter": "rem",
		"selected_items":
		[
			[
				"rem",
				"Package Control: Remove Package"
			],
			[
				"ycmd",
				"Ycmd: Settings - Default"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"",
				"Set Syntax: Python"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 112.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/arindam/github-blog/legacy25.github.io",
		"/home/arindam/github-blog/legacy25.github.io/_posts"
	],
	"file_history":
	[
		"/home/arindam/github-blog/legacy25.github.io/_posts/2015-09-23-designing-a-sql-evaluator-ast-optimizations.md",
		"/home/arindam/github-blog/legacy25.github.io/legacy.github.io.sublime-project",
		"/home/arindam/github-blog/legacy25.github.io/_includes/default.html",
		"/home/arindam/github-blog/legacy25.github.io/_layouts/minimal.html",
		"/home/arindam/github-blog/legacy25.github.io/about.html",
		"/home/arindam/github-blog/legacy25.github.io/_config.yml",
		"/home/arindam/github-blog/legacy25.github.io/_includes/sidebar.html",
		"/home/arindam/github-blog/legacy25.github.io/assets/css/style.css",
		"/home/arindam/.config/sublime-text-3/Packages/User/jekyll.sublime-build",
		"/home/arindam/.config/sublime-text-3/Packages/User/C++11.sublime-settings",
		"/home/arindam/github-blog/legacy25.github.io/_includes/page.html",
		"/home/arindam/test/quora.c",
		"/home/arindam/test/tpch6.ll",
		"/home/arindam/test/test.c",
		"/home/arindam/test/test.ll",
		"/home/arindam/ValkyrieProcessor/build.sh",
		"/home/arindam/hyrise/build/SQLParser.h",
		"/home/arindam/hyrise/docs/documentation.md",
		"/home/arindam/hyrise/docs/syntax.md",
		"/home/arindam/hyrise/docs/integration.md",
		"/home/arindam/hyrise/docs/doxy.conf",
		"/home/arindam/hyrise/README.md",
		"/home/arindam/ValkyrieProcessor/main.cpp",
		"/home/arindam/.config/sublime-text-3/Packages/YcmdCompletion/YcmdCompletion.sublime-settings",
		"/home/arindam/llvm/llvmlitetest.py",
		"/home/arindam/llvm/test.ll",
		"/home/arindam/DB/SQL-Parser/sql/tpch1.sql",
		"/home/arindam/DB/SQL-Parser/sql/tpch3.sql",
		"/home/arindam/DB/SQL-Parser/sql/tpch5.sql",
		"/home/arindam/DB/SQL-Parser/sql/tpch6.sql",
		"/home/arindam/DB/SQL-Parser/sql/tpch10.sql",
		"/home/arindam/DB/SQL-Parser/sql/tpch12.sql",
		"/home/arindam/DB/SQL-Parser/sql/tpch_schemas.sql",
		"/home/arindam/DB/SQL-Parser/src/edu/buffalo/cse562/operators/ProjectScanOperator.java",
		"/home/arindam/DB/SQL-Parser/src/edu/buffalo/cse562/Main.java",
		"/home/arindam/mimir/mimircore/src/main/scala/mimir/Mimir.scala",
		"/home/arindam/mimir/mimircore/src/main/scala/mimir/WebAPI.scala",
		"/home/arindam/mimir/mimircore/src/main/scala/mimir/Database.scala",
		"/home/arindam/mimir/mimircore/src/main/scala/mimir/lenses/Lens.scala",
		"/home/arindam/mimir/mimircore/src/main/scala/mimir/lenses/LensManager.scala",
		"/home/arindam/mimir/mimircore/src/main/scala/mimir/lenses/Lens",
		"/home/arindam/github-blog/legacy25.github.io/index.html",
		"/home/arindam/c/matrix.c",
		"/home/arindam/github-blog/legacy25.github.io/_layouts/page.html",
		"/home/arindam/github-blog/legacy25.github.io/_layouts/nav.html",
		"/home/arindam/DB/p2/helloworld.S",
		"/home/arindam/DB/p2/helloworld.c",
		"/home/arindam/DB/p2/add.S",
		"/home/arindam/DB/p2/add.c",
		"/home/arindam/DB/p2/hello",
		"/home/arindam/github-blog/legacy25.github.io/assets/resources/font-awesome/css/font-awesome.css",
		"/home/arindam/github-blog/legacy25.github.io/_posts/2015-09-22-designing-a-sql-evaluator-introduction.md",
		"/home/arindam/github-blog/legacy25.github.io/categories.html",
		"/home/arindam/github-blog/legacy25.github.io/archives.html",
		"/home/arindam/DB/ValkyrieDB/test/sql/tpch1.sql",
		"/home/arindam/DB/ValkyrieDB/test/sql/tpch3.sql",
		"/home/arindam/DB/SQL-Parser/src/edu/buffalo/cse562/ParseTreeGenerator.java",
		"/home/arindam/github-blog/legacy25.github.io/_posts/2015-09-22-designing-a-sql-evaluator-intorduction.md",
		"/home/arindam/github-blog/legacy25.github.io/_posts/2015-09-23-designing-a-sql-evaluator-relational-algebra.md",
		"/home/arindam/llvm/tpch6.S",
		"/home/arindam/llvm/tpch6.py",
		"/home/arindam/github-blog/legacy25.github.io/_layouts/post.html",
		"/home/arindam/DB/ValkyrieDB/test/sql/tpch6.sql",
		"/home/arindam/github-blog/legacy25.github.io/_includes/post.html",
		"/home/arindam/github-blog/legacy25.github.io/_layouts/default.html",
		"/home/arindam/github-blog/legacy25.github.io/.gitignore",
		"/home/arindam/github-blog/legacy25.github.io/_includes/disqus.html",
		"/home/arindam/github-blog/dbyll-master/assets/css/style.css",
		"/home/arindam/github-blog/legacy25.github.io/_posts/2015-09-22-designing-a-sql-parser-intorduction.md",
		"/home/arindam/github-blog/dbyll-master/tags.html",
		"/home/arindam/github-blog/dbyll-master/_posts/2015-09-22-designing-a-sql-parser-intorduction.md",
		"/home/arindam/github-blog/dbyll-master/_config.yml",
		"/home/arindam/github-blog/dbyll-master/assets/js/app.js",
		"/home/arindam/github-blog/dbyll-master/_layouts/default.html",
		"/home/arindam/github-blog/dbyll-master/_layouts/page.html",
		"/home/arindam/github-blog/dbyll-master/_layouts/post.html",
		"/home/arindam/github-blog/dbyll-master/README.md",
		"/home/arindam/github-blog/dbyll-master/categories.html",
		"/home/arindam/github-blog/dbyll-master/index.html",
		"/home/arindam/github-blog/dbyll-master/_includes/disqus.html",
		"/home/arindam/github-blog/dbyll-master/_includes/default.html",
		"/home/arindam/github-blog/dbyll-master/_includes/page.html",
		"/home/arindam/github-blog/dbyll-master/_includes/post.html",
		"/home/arindam/github-blog/dbyll-master/_includes/sidebar.html",
		"/home/arindam/github-blog/dbyll-master/assets/resources/bootstrap/css/bootstrap.min.css",
		"/home/arindam/github-blog/dbyll-master/assets/resources/font-awesome/css/font-awesome.css",
		"/home/arindam/github-blog/legacy25.github.io/README.md",
		"/home/arindam/DB/ValkyrieDB/test/time.py",
		"/home/arindam/github-blog/poole/_posts/2015-09-22-building-a-sql-evaluator-introduction.md",
		"/home/arindam/github-blog/poole/_sass/_syntax.scss",
		"/home/arindam/github-blog/poole/_sass/_code.scss",
		"/home/arindam/github-blog/poole/_includes/head.html",
		"/home/arindam/github-blog/poole/about.md",
		"/home/arindam/github-blog/poole/index.html",
		"/home/arindam/github-blog/jekyll/_layouts/default.html",
		"/home/arindam/github-blog/poole/styles.scss",
		"/home/arindam/github-blog/poole/_posts/2013-12-31-whats-jekyll.md",
		"/home/arindam/DB/ValkyrieDB/test/sql/tpch10.sql",
		"/home/arindam/llvm/tpch6.c",
		"/home/arindam/github-blog/poole/_sass/syntax.css",
		"/home/arindam/github-blog/jekyll/_posts/2013-11-17-complement.md",
		"/home/arindam/legacy25.github.io/index.html",
		"/home/arindam/DB/JSqlParser/src/main/java/net/sf/jsqlparser/expression/DateValue.java",
		"/home/arindam/DB/SQL-Parser/sql/tpch6nodate.sql",
		"/home/arindam/llvm/test.c",
		"/home/arindam/llvm/data/region.tbl",
		"/home/arindam/llvm/data/nation.tbl",
		"/home/arindam/github/Channel-Assigner/AssignFrequency.c",
		"/home/arindam/DS/GroupMessenger/.gitignore",
		"/home/arindam/DB/ValkyrieDB/test/tpch-data-setup.py",
		"/media/arindam/4C42BDC942BDB7D2/Study/OS/confinstall.sh",
		"/home/arindam/github/Channel-Assigner/GUI.py",
		"/home/arindam/DB/ValkyrieDB/.gitignore",
		"/home/arindam/Test/ValkyrieDB/test/tpch-data-setup.py",
		"/home/arindam/DB/ValkyrieDB/test/ddl-schema.sql",
		"/home/arindam/cse662/SQL-Parser/run.sh",
		"/home/arindam/DB/SQL-Parser/run.sh",
		"/home/arindam/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
		"/home/arindam/cse662/SQL-Parser/Manifest.txt",
		"/home/arindam/cse662/SQL-Parser/Manifest.mf",
		"/home/arindam/cse662/Test-Framework/time.py",
		"/home/arindam/cse662/Sqlite-TPCH/ddl-schema.sql",
		"/home/arindam/cse662/Test-Framework/sql/tpch1.sql",
		"/home/arindam/cse662/Test-Framework/sql/tpch3.sql",
		"/home/arindam/cse662/Test-Framework/sql/tpch5.sql",
		"/home/arindam/cse662/Test-Framework/sql/tpch6.sql",
		"/home/arindam/cse662/Test-Framework/sql/tpch10.sql",
		"/home/arindam/cse662/Test-Framework/sql/tpch12.sql"
	],
	"find":
	{
		"height": 31.0
	},
	"find_in_files":
	{
		"height": 81.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			">\n",
			"	\n",
			":\n",
			"initialize",
			"crea",
			"fa-fol",
			"fa-",
			"img",
			"	\n",
			"img",
			"circle",
			"img-circle",
			"img-cir",
			"bio",
			";\n",
			"googl",
			"anal",
			"google",
			"padding-left:15px",
			"padd",
			";\n",
			"ubun",
			"img-circle",
			"faceb",
			"pinterest",
			")\n",
			";\n",
			"{\n",
			";\n",
			"	\n",
			")\n",
			"		\n",
			"= {}\n\n# 	print(\"SQLITE3 times\")\n\n# 	for f in files:\n# 		query = os.path.basename(f).split(\".sql\")[0]\n# 		times[query] = reduce(lambda x,y: x+y, map(lambda x: float(x), readlinefromfile(os.path.join(\"../SQL-Parser/output/\", query+\".stat\")).split(\"|\")))\n# 		print(\"{} to",
			")\n",
			";\n",
			")\n",
			"THE_CLASSPATH",
			"/\n",
			"\"\n",
			"			;",
			"Proc",
			",\n",
			"supplier",
			" \n",
			"h1vOzttGk9mP6fkUsTRUUx1mDgyNv0eM",
			"image",
			"heapbase",
			");\n",
			"    \n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n-- Unsupported features for this query\n--   INTERVAL (inlined into constant)\n--   ORDER BY (ignored)"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "_posts/2015-10-01-google-mock-interview.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4325,
						"regions":
						{
						},
						"selection":
						[
							[
								4315,
								4315
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 780.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/arindam/test/ladan",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 21.0
	},
	"input":
	{
		"height": 29.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.CppYCM.2":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 88.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/jekyll.sublime-build",
	"project": "legacy.github.io.sublime-project",
	"replace":
	{
		"height": 38.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 404.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
